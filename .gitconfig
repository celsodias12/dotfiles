[user]
    name = Celso Dias
[init]
    defaultBranch = main
[push]
    autoSetupRemote = true
[alias]
    sw = switch
    swc = switch -c

    p = pull
    por = pull origin

    cm = commit
    cmm = commit -m
    cmmam = commit --amend
    incm = cmm 'feat: inital commit'
    acmm = !git a . && git cmm

    br = branch
    brd = branch -d
    brD = branch -D
    brr = branch -m
    brl = branch --list

    res = reset
    delcm = reset --soft HEAD~1
    resh = reset --hard

    st = stash
    stl = stash list
    stc = stash clear
    stw = stash show
    sts = stash save
    sta = stash apply
    std = stash drop
    stp = stash pop
    exst = !git a . && git st && git stash show "stash@{0}" -p >stash.patch && git stp
    imst = apply stash.patch

    lg = log --graph
    lga = log --graph --all
    lgo = log --graph --oneline
    lpo = log --pretty=oneline
    lo = log --oneline

    me = merge
    meq = merge --quit

    rev = revert HEAD~1

    pod = push origin -d

    a = add

    cl = clone

    fe = fetch

    feature = "!f() { git swc feature/$1; }; f"
    hotfix = "!f() { git swc hotfix/$1; }; f"

    feat = "!f() { local commit_type='feat'; if [ $# -eq 1 ]; then local commit_message=$1; git cmm \"$commit_type: $commit_message\"; elif [ $# -eq 2 ]; then local scope=$1; local commit_message=$2; git cmm \"$commit_type($scope): $commit_message\"; else echo 'Invalid arguments'; return 1; fi; }; f"
    fix = "!f() { local commit_type='fix'; if [ $# -eq 1 ]; then local commit_message=$1; git cmm \"$commit_type: $commit_message\"; elif [ $# -eq 2 ]; then local scope=$1; local commit_message=$2; git cmm \"$commit_type($scope): $commit_message\"; else echo 'Invalid arguments'; return 1; fi; }; f"
    docs = "!f() { local commit_type='docs'; if [ $# -eq 1 ]; then local commit_message=$1; git cmm \"$commit_type: $commit_message\"; elif [ $# -eq 2 ]; then local scope=$1; local commit_message=$2; git cmm \"$commit_type($scope): $commit_message\"; else echo 'Invalid arguments'; return 1; fi; }; f"
    style = "!f() { local commit_type='style'; if [ $# -eq 1 ]; then local commit_message=$1; git cmm \"$commit_type: $commit_message\"; elif [ $# -eq 2 ]; then local scope=$1; local commit_message=$2; git cmm \"$commit_type($scope): $commit_message\"; else echo 'Invalid arguments'; return 1; fi; }; f"
    refactor = "!f() { local commit_type='refactor'; if [ $# -eq 1 ]; then local commit_message=$1; git cmm \"$commit_type: $commit_message\"; elif [ $# -eq 2 ]; then local scope=$1; local commit_message=$2; git cmm \"$commit_type($scope): $commit_message\"; else echo 'Invalid arguments'; return 1; fi; }; f"
    perf = "!f() { local commit_type='perf'; if [ $# -eq 1 ]; then local commit_message=$1; git cmm \"$commit_type: $commit_message\"; elif [ $# -eq 2 ]; then local scope=$1; local commit_message=$2; git cmm \"$commit_type($scope): $commit_message\"; else echo 'Invalid arguments'; return 1; fi; }; f"
    test = "!f() { local commit_type='test'; if [ $# -eq 1 ]; then local commit_message=$1; git cmm \"$commit_type: $commit_message\"; elif [ $# -eq 2 ]; then local scope=$1; local commit_message=$2; git cmm \"$commit_type($scope): $commit_message\"; else echo 'Invalid arguments'; return 1; fi; }; f"
    build = "!f() { local commit_type='build'; if [ $# -eq 1 ]; then local commit_message=$1; git cmm \"$commit_type: $commit_message\"; elif [ $# -eq 2 ]; then local scope=$1; local commit_message=$2; git cmm \"$commit_type($scope): $commit_message\"; else echo 'Invalid arguments'; return 1; fi; }; f"
    ci = "!f() { local commit_type='ci'; if [ $# -eq 1 ]; then local commit_message=$1; git cmm \"$commit_type: $commit_message\"; elif [ $# -eq 2 ]; then local scope=$1; local commit_message=$2; git cmm \"$commit_type($scope): $commit_message\"; else echo 'Invalid arguments'; return 1; fi; }; f"
    chore = "!f() { local commit_type='chore'; if [ $# -eq 1 ]; then local commit_message=$1; git cmm \"$commit_type: $commit_message\"; elif [ $# -eq 2 ]; then local scope=$1; local commit_message=$2; git cmm \"$commit_type($scope): $commit_message\"; else echo 'Invalid arguments'; return 1; fi; }; f"
    revert = "!f() { local commit_type='revert'; if [ $# -eq 1 ]; then local commit_message=$1; git cmm \"$commit_type: $commit_message\"; elif [ $# -eq 2 ]; then local scope=$1; local commit_message=$2; git cmm \"$commit_type($scope): $commit_message\"; else echo 'Invalid arguments'; return 1; fi; }; f"

[includeIf "gitdir:~/"]
  path = ~/.gitconfig-me
